{"version":3,"sources":["components/AddTodoForm/AddTodoForm.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/SortButtons/SortButtons.tsx","services/todoApi.ts","App.tsx","index.tsx","components/SortButtons/SortButtons.module.scss","components/TodoItem/TodoItem.module.scss","components/AddTodoForm/AddTodoForm.module.scss"],"names":["AddTodoForm","onSubmit","useState","text","setText","className","styles","addTodoForm","event","preventDefault","trim","length","alert","autoComplete","TextField","type","name","value","onChange","target","label","variant","inputDiv","Button","color","endIcon","TodoItem","todo","onToggleCompleted","onDeleteTodo","id","description","isDone","ListItem","divider","divItem","FormControlLabel","Label","control","Checkbox","checked","ListItemText","IconButton","onClick","title","btnDel","DeleteForever","TodoList","todos","List","map","SortButtons","todosItems","onClickBySort","React","alignment","setAlignment","allTodosQuantity","completedTodosQuantity","notCompletedTodosQuantity","buttonsWrapper","ToggleButtonGroup","exclusive","newAlignment","ToggleButton","selected","undefined","PlaylistAddCheck","CheckBox","CheckBoxOutlineBlank","axios","defaults","baseURL","get","then","data","catch","error","console","log","delete","newTodo","post","body","patch","App","setTodos","toggleChecked","setToggleChecked","showTodos","setShowTodos","sortBy","setSortBys","useEffect","apiServices","addTodoHandler","a","prevTodos","toggleCompletedHandler","todoId","idDoneTodos","filter","deleteTodoHandler","CompletedTodos","NotCompletedTodos","groupOfTodosForButtons","chooseCompletedHandler","Container","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.aadeefa0.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { ITodoFormProps } from '../../interfaces/Todo.interface';\r\nimport styles from './AddTodoForm.module.scss';\r\n\r\nconst AddTodoForm: React.FC<ITodoFormProps> = ({ onSubmit }) => {\r\n  const [text, setText] = useState<string>('');\r\n\r\n  const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const handelForm = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    if (text.trim().length === 0) return;\r\n    if (text.trim().length > 70) {\r\n      alert('Length text todo max 70!');\r\n      return;\r\n    }\r\n    onSubmit(text);\r\n    setText('');\r\n  };\r\n\r\n  return (\r\n    <form\r\n      className={styles.addTodoForm}\r\n      onSubmit={handelForm}\r\n      autoComplete=\"off\"\r\n    >\r\n      <TextField\r\n        type=\"text\"\r\n        name=\"text\"\r\n        value={text}\r\n        onChange={changeHandler}\r\n        label=\"Enter Todo\"\r\n        variant=\"outlined\"\r\n        className={styles.inputDiv}\r\n      />\r\n      <Button\r\n        type=\"submit\"\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        endIcon={<AddIcon>add</AddIcon>}\r\n      >\r\n        Add todo\r\n      </Button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default AddTodoForm;\r\n","import React from 'react';\r\nimport styles from './TodoItem.module.scss';\r\nimport { ITodoItemProps } from '../../interfaces/Todo.interface';\r\nimport {\r\n  ListItem,\r\n  ListItemText,\r\n  IconButton,\r\n  Checkbox,\r\n  FormControlLabel,\r\n} from '@material-ui/core';\r\nimport { DeleteForever } from '@material-ui/icons';\r\n\r\nconst TodoItem: React.FC<ITodoItemProps> = ({\r\n  todo,\r\n  onToggleCompleted,\r\n  onDeleteTodo,\r\n}) => {\r\n  const { id, description, isDone } = todo;\r\n\r\n  const handleCompleted = () => {\r\n    onToggleCompleted(id, { isDone: !isDone });\r\n  };\r\n\r\n  const handleDeleteTodo = () => {\r\n    onDeleteTodo(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ListItem divider className={styles.divItem}>\r\n        <FormControlLabel\r\n          className={styles.Label}\r\n          control={\r\n            <Checkbox\r\n              checked={isDone}\r\n              onChange={handleCompleted}\r\n              color=\"primary\"\r\n            />\r\n          }\r\n          label={<ListItemText>{description}</ListItemText>}\r\n        />\r\n        <IconButton\r\n          aria-label=\"Delete\"\r\n          type=\"button\"\r\n          onClick={handleDeleteTodo}\r\n          title=\"Delete todo\"\r\n          className={styles.btnDel}\r\n        >\r\n          <DeleteForever />\r\n        </IconButton>\r\n      </ListItem>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TodoItem;\r\n","import React, { useRef, useState } from 'react';\r\nimport { List } from '@material-ui/core';\r\nimport TodoItem from '../TodoItem/TodoItem';\r\nimport { ITodoListProps } from '../../interfaces/Todo.interface';\r\nimport styles from './TodoList.module.scss';\r\n\r\nconst TodoList: React.FC<ITodoListProps> = ({\r\n  todos,\r\n  onDeleteTodo,\r\n  onToggleCompleted,\r\n}) => {\r\n  return (\r\n    <List>\r\n      {todos?.map(todo => (\r\n        <TodoItem\r\n          key={todo.id}\r\n          todo={todo}\r\n          onDeleteTodo={onDeleteTodo}\r\n          onToggleCompleted={onToggleCompleted}\r\n        />\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\nimport {\r\n  CheckBox,\r\n  CheckBoxOutlineBlank,\r\n  PlaylistAddCheck,\r\n} from '@material-ui/icons';\r\nimport { ISortButtonsProps } from '../../interfaces/Todo.interface';\r\nimport styles from './SortButtons.module.scss';\r\n\r\nconst SortButtons: React.FC<ISortButtonsProps> = ({\r\n  todosItems,\r\n  onClickBySort,\r\n}) => {\r\n  const [alignment, setAlignment] = React.useState<string | null>('all');\r\n\r\n  const {\r\n    allTodosQuantity,\r\n    completedTodosQuantity,\r\n    notCompletedTodosQuantity,\r\n  } = todosItems;\r\n\r\n  const handleAlignment = (\r\n    event: React.MouseEvent<HTMLElement>,\r\n    newAlignment: string | null,\r\n  ) => {\r\n    setAlignment(newAlignment);\r\n    onClickBySort(newAlignment);\r\n  };\r\n  return (\r\n    <div className={styles.buttonsWrapper}>\r\n      <ToggleButtonGroup\r\n        value={alignment}\r\n        exclusive\r\n        onChange={handleAlignment}\r\n        aria-label=\"button group\"\r\n      >\r\n        <ToggleButton\r\n          value=\"all\"\r\n          aria-label=\"all todos button\"\r\n          className={\r\n            alignment === 'all'\r\n              ? `${styles.checked} ${styles.selected}`\r\n              : undefined\r\n          }\r\n        >\r\n          <PlaylistAddCheck />\r\n          All todos: {allTodosQuantity}\r\n        </ToggleButton>\r\n        <ToggleButton\r\n          value=\"completed\"\r\n          aria-label=\"completed todos button\"\r\n          className={\r\n            alignment === 'completed'\r\n              ? `${styles.checked} ${styles.selected}`\r\n              : undefined\r\n          }\r\n        >\r\n          <CheckBox /> Completed: {completedTodosQuantity}\r\n        </ToggleButton>\r\n        <ToggleButton\r\n          value=\"notCompleted\"\r\n          aria-label=\"not completed todos button\"\r\n          className={\r\n            alignment === 'notCompleted'\r\n              ? `${styles.checked} ${styles.selected}`\r\n              : undefined\r\n          }\r\n        >\r\n          <CheckBoxOutlineBlank /> Not completed: {notCompletedTodosQuantity}\r\n        </ToggleButton>\r\n      </ToggleButtonGroup>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SortButtons;\r\n","import axios from 'axios';\r\nimport { INewTodo, ITodoStatus } from '../interfaces/Todo.interface';\r\n\r\n// axios.defaults.baseURL = 'http://localhost:3000/api/todos';\r\naxios.defaults.baseURL = 'https://pwe-rest-api.herokuapp.com/api/todos';\r\n\r\nconst getTodos = () => {\r\n  return axios\r\n    .get('/')\r\n    .then(({ data }) => data)\r\n    .catch(error => console.log('error', error));\r\n};\r\n\r\nconst deleteTodo = (id: string) => {\r\n  axios.delete(`/${id}`).catch(error => console.log('error', error));\r\n};\r\n\r\nconst addTodo = (newTodo: INewTodo) => {\r\n  return axios\r\n    .post('/', newTodo)\r\n    .then(({ data }) => data)\r\n    .catch(error => console.log('error', error));\r\n};\r\n\r\nconst updateTodo = (id: string, body: ITodoStatus) => {\r\n  return axios\r\n    .patch(`/${id}/status`, body)\r\n    .then(({ data }) => data)\r\n    .catch(error => console.log('error', error));\r\n};\r\n\r\nexport default { getTodos, deleteTodo, addTodo, updateTodo };\r\n","import React, { useState, useEffect } from 'react';\nimport { Container } from '@material-ui/core';\nimport AddTodoForm from './components/AddTodoForm/AddTodoForm';\nimport TodoList from './components/TodoList/TodoList';\nimport SortButtons from './components/SortButtons/SortButtons';\nimport apiServices from './services/todoApi';\nimport { ITodo, INewTodo, ITodoStatus } from './interfaces/Todo.interface';\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState<ITodo[]>([]);\n\n  const [toggleChecked, setToggleChecked] = useState<boolean>(false);\n\n  const [showTodos, setShowTodos] = useState<ITodo[]>([]);\n\n  const [sortBy, setSortBys] = useState<string>('all');\n\n  useEffect(() => {\n    apiServices.getTodos().then(({ data }) => {\n      setTodos(data.todos), setShowTodos(data.todos);\n    });\n  }, []);\n\n  const addTodoHandler = async (text: string) => {\n    const newTodo: INewTodo = {\n      description: text,\n    };\n    await apiServices\n      .addTodo(newTodo)\n      .then(({ data }) => setTodos(prevTodos => [data.newTodo, ...prevTodos]));\n  };\n\n  const toggleCompletedHandler = async (todoId: string, body: ITodoStatus) => {\n    await setTodos(prevTodos =>\n      prevTodos.map(todo =>\n        todo.id === todoId ? { ...todo, isDone: !todo.isDone } : todo,\n      ),\n    );\n    await apiServices.updateTodo(todoId, body);\n    setToggleChecked(true);\n  };\n\n  useEffect(() => {\n    if (toggleChecked) {\n      const idDoneTodos = todos.filter(({ isDone }) => isDone);\n      console.log('All completed todos', idDoneTodos);\n      setToggleChecked(false);\n    }\n  }, [toggleCompletedHandler]);\n\n  const deleteTodoHandler = async (todoId: string) => {\n    await setTodos(prevTodos => prevTodos.filter(todo => todo.id !== todoId));\n    await apiServices.deleteTodo(todoId);\n  };\n\n  useEffect(() => {\n    if (sortBy === 'all') {\n      setShowTodos(todos);\n    }\n    if (sortBy === 'completed') {\n      setShowTodos(CompletedTodos);\n    }\n    if (sortBy === 'notCompleted') {\n      setShowTodos(NotCompletedTodos);\n    }\n  }, [todos, sortBy]);\n\n  const CompletedTodos = todos.filter(({ isDone }) => isDone);\n  const NotCompletedTodos = todos.filter(({ isDone }) => !isDone);\n\n  const allTodosQuantity = todos.length;\n  const completedTodosQuantity = todos.filter(({ isDone }) => isDone).length;\n  const notCompletedTodosQuantity = todos.filter(\n    ({ isDone }) => !isDone,\n  ).length;\n\n  const groupOfTodosForButtons = {\n    allTodosQuantity,\n    completedTodosQuantity,\n    notCompletedTodosQuantity,\n  };\n\n  const chooseCompletedHandler = async (value: string | null) => {\n    switch (value) {\n      case 'all':\n        setSortBys(value);\n        setShowTodos(todos);\n        return;\n      case 'completed':\n        setSortBys(value);\n        setShowTodos(CompletedTodos);\n        return;\n      case 'notCompleted':\n        setSortBys(value);\n        setShowTodos(NotCompletedTodos);\n        return;\n      default:\n        return;\n    }\n  };\n\n  return (\n    <Container>\n      <AddTodoForm onSubmit={addTodoHandler} />\n      <SortButtons\n        todosItems={groupOfTodosForButtons}\n        onClickBySort={chooseCompletedHandler}\n      />\n      <TodoList\n        todos={showTodos}\n        onDeleteTodo={deleteTodoHandler}\n        onToggleCompleted={toggleCompletedHandler}\n      />\n    </Container>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonsWrapper\":\"SortButtons_buttonsWrapper__2awMi\",\"checked\":\"SortButtons_checked__2AUFF\",\"selected\":\"SortButtons_selected__2sIWw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"divItem\":\"TodoItem_divItem__Z6pIL\",\"Label\":\"TodoItem_Label__1Wlff\",\"btnDel\":\"TodoItem_btnDel__15A_m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addTodoForm\":\"AddTodoForm_addTodoForm__3gSdD\",\"inputDiv\":\"AddTodoForm_inputDiv__3WQ_Y\",\"browser-default\":\"AddTodoForm_browser-default__s9hTj\"};"],"sourceRoot":""}